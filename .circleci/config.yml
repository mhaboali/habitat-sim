version: 2.1
gpu: &gpu
  machine:
    image: ubuntu-1604:201903-01
  resource_class: gpu.small
  environment:
    FPS_THRESHOLD: 900

jobs:
  python_lint:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: setup
          command: |
              sudo pip install -U black "isort[pyproject]" numpy pytest sphinx pillow tqdm hypothesis
              sudo pip install -r requirements.txt --progress-bar off
      - run:
          name: run black
          command: |
              black --version
              black habitat_sim/. examples/. tests/. setup.py --diff
              black habitat_sim/. examples/. tests/. setup.py --check
      - run:
          name: run isort
          command: |
              isort --version
              isort -rc habitat_sim/. examples/. tests/. setup.py --diff
              isort -rc habitat_sim/. examples/. tests/. setup.py --check-only

  cpp_lint:
    docker:
      - image: circleci/buildpack-deps:disco
    steps:
      - checkout
      - run:
          name: setup
          command: |
              sudo apt-get update -y
              sudo apt-get install -y clang-format-8
              sudo ln -s /usr/bin/clang-format-8 /usr/bin/clang-format
              clang-format --version
      - run:
          name: run clang-format
          command: |
            find . -not -path "*/\.*" -not -path "*/deps/*" -not -path "*/obsolete/*" -not -path "*/build/*" | grep -E ".*\.(cpp|h|cu|hpp|cuh)$" | xargs -I {} bash -c "diff -u <(cat {}) <(clang-format -style=file {})"

  js_lint:
    docker:
      - image: circleci/node:11.9
    steps:
      - checkout
      - run:
          name: setup
          command: |
            npm install
      - run:
          name: run eslint
          command: |
            npm run lint

  install_and_test_ubuntu:
    <<: *gpu
    steps:
      - checkout:
          path: ./habitat-sim
      - run:
          name: CPU info
          no_output_timeout: 1m
          command: |
              cat /proc/cpuinfo
      - run:
          name: Install clang-tidy
          command: |
              sudo add-apt-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main"
              sudo apt-get update -y || true
              sudo apt-get install -y clang-tidy-9
              sudo ln -s /usr/bin/clang-tidy-9 /usr/local/bin/clang-tidy
              clang-tidy --version
      - run:
          name: Install cmake
          no_output_timeout: 5m
          # tinyply requires CMake 3.10, so stay at that version. Ubuntu 16.04
          # has 3.5, so once tinyply is removed, we could go lower (well, if
          # anybody actually needs that)
          command: |
              echo $(git ls-remote https://github.com/facebookresearch/habitat-api.git HEAD | awk '{ print $1}') > ./hapi_sha
              cat ./hapi_sha
              wget https://cmake.org/files/v3.10/cmake-3.10.3-Linux-x86_64.sh
              sudo mkdir /opt/cmake
              sudo sh ./cmake-3.10.3-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
              sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
      - run:
          name: Install dependencies
          no_output_timeout: 20m
          command: |
              sudo apt-get update || true
              sudo apt-get install -y --no-install-recommends \
                  build-essential \
                  git \
                  curl \
                  vim \
                  ca-certificates \
                  libjpeg-dev \
                  libglm-dev \
                  libegl1-mesa-dev \
                  xorg-dev \
                  freeglut3-dev \
                  pkg-config \
                  wget \
                  zip \
                  libbullet-dev\
                  lcov\
                  unzip || true
              sudo apt install --allow-change-held-packages \
                  texlive-base \
                  texlive-latex-extra \
                  texlive-fonts-extra \
                  texlive-fonts-recommended
      - run:
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get update || true
            sudo apt-get install -yq \
                  gconf-service \
                  libasound2 \
                  libatk1.0-0 \
                  libatk-bridge2.0-0 \
                  libc6 \
                  libcairo2 \
                  libcups2 \
                  libdbus-1-3  \
                  libexpat1 \
                  libfontconfig1 \
                  libgcc1 \
                  libgconf-2-4 \
                  libgdk-pixbuf2.0-0 \
                  libglib2.0-0 \
                  libgtk-3-0 \
                  libnspr4 \
                  libpango-1.0-0 \
                  libpangocairo-1.0-0 \
                  libstdc++6 \
                  libx11-6 \
                  libx11-xcb1 \
                  libxcb1 \
                  libxcomposite1 \
                  libxcursor1 \
                  libxdamage1 \
                  libxext6 \
                  libxfixes3 \
                  libxi6 \
                  libxrandr2 \
                  libxrender1 \
                  libxss1 \
                  libxtst6 \
                  ca-certificates \
                  fonts-liberation \
                  libappindicator1 \
                  libnss3 \
                  lsb-release \
                  xdg-utils \
                  wget
      - run:
          name: Install cuda
          no_output_timeout: 20m
          background: true
          command: |
              wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_8.0.44-1_amd64.deb
              sudo dpkg -i cuda-repo-ubuntu1604_8.0.44-1_amd64.deb
              sudo apt-get update || true
              sudo apt-get --yes --force-yes install cuda
              touch ./cuda_installed
              nvidia-smi
      - restore_cache:
          keys:
            - conda-{{ checksum "habitat-sim/.circleci/config.yml" }}
      - run:
          name: Install conda and dependencies
          no_output_timeout: 20m
          command: |
              if [ ! -d ~/miniconda ]
              then
                curl -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
                chmod +x ~/miniconda.sh
                ~/miniconda.sh -b -p $HOME/miniconda
                rm ~/miniconda.sh
                export PATH=$HOME/miniconda/bin:$PATH
                conda create -y -n habitat python=3.6
                . activate habitat
                conda install -q -y -c conda-forge ninja numpy pytest pytest-cov ccache hypothesis
              fi
      - run:
          name: Install emscripten
          no_output_timeout: 20m
          background: true
          command: |
              if [ ! -f ~/emscripten_installed ]
              then
                export PATH=$HOME/miniconda/bin:$PATH
                . activate habitat;
                git clone -q https://github.com/emscripten-core/emsdk.git ~/emsdk
                cd ~/emsdk
                git checkout 6a4c0f98
                ./emsdk install 1.38.38
                ./emsdk activate 1.38.38
                touch ~/emscripten_installed
              fi
      - run:
          name: Install pytorch
          no_output_timeout: 20m
          background: true
          command: |
              if [ ! -f ~/miniconda/pytorch_installed ]
              then
                export PATH=$HOME/miniconda/bin:$PATH
                . activate habitat;
                conda install -c  conda-forge opencv -y
                conda install -y pytorch torchvision  cudatoolkit=10.0 -c pytorch
              fi
              touch ~/miniconda/pytorch_installed
      - run:
          name: Install JavaScript dependencies
          background: true
          command: |
              if [ ! -f ~/npm_deps_installed ]
              then
                wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                . ~/.bashrc
                nvm install v11.9.0
                nvm use v11.9.0
                npm install
                touch ~/npm_deps_installed
              fi
      - restore_cache:
          keys:
            - habitat-api-{{ checksum "./hapi_sha" }}
      - restore_cache:
          keys:
            - ccache-{{ arch }}-master
            - ccache-{{ arch }}-{{ .Branch }}
          paths:
            - /home/circleci/.ccache
      - run:
          name: CCache initialization
          command: |
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat;
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=10.0G
      - run:
          name: Build, install habitat-sim and run benchmark
          no_output_timeout: 20m
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              pip install -r requirements.txt --progress-bar off
              python setup.py install --headless
      - run:
          name: run clang-tidy
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              python tools/run-clang-tidy.py src/esp
      - run:
          name: Ccache stats
          when: always
          command: |
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat;
            ccache --show-stats
      - save_cache:
          key: ccache-{{ arch }}-{{ .Branch }}
          background: true
          paths:
            - /home/circleci/.ccache
      - run:
          name: Download test data
          command: |

              if [ ! -d ./habitat-sim/data/scene_datasets/habitat-test-scenes/van-gogh-room.glb ]
              then
                cd habitat-sim
                wget http://dl.fbaipublicfiles.com/habitat/habitat-test-scenes.zip
                unzip habitat-test-scenes.zip
                rm habitat-test-scenes.zip
                cd ..
              fi

              if [ ! -d ./habitat-sim/data/objects/cheezit.glb ]
              then
                cd habitat-sim
                wget http://dl.fbaipublicfiles.com/habitat/objects_v0.1.zip
                unzip objects_v0.1.zip -d data/objects/
                rm objects_v0.1.zip
                cd ..
              fi
      - run:
          name: Build Javascript bindings
          command: |
              # wait for npm and emscripten install
              while [[ ! -f ~/emscripten_installed && ! -f ~/npm_deps_installed ]]; do sleep 2; done
              cd habitat-sim
              . ~/.bashrc
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat
              export EMSCRIPTEN=$HOME/emsdk/fastcomp/emscripten
              nvm use v11.9.0
              ./build_js.sh
              # TODO: Later fix this in the cmake build step
              cp -v build_js/Release/bin/hsim_bindings.* build_js/esp/bindings_js/
      - run:
          name: Run sim benchmark
          command: |
              while [ ! -f ./cuda_installed ]; do sleep 2; done # wait for CUDA
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim
              python examples/example.py --scene data/scene_datasets/habitat-test-scenes/van-gogh-room.glb --silent --test_fps_regression $FPS_THRESHOLD
      - run:
          name: Run JavaScript tests
          command: |
            cd habitat-sim
            . ~/.bashrc
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat
            export EMSCRIPTEN=$HOME/emsdk/fastcomp/emscripten
            nvm use v11.9.0
            npm run test
      - run:
          name: Run sim tests
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim

              export PYTHONPATH=$PYTHONPATH:$(pwd)
              # run tests with code coverage
              CORRADE_TEST_COLOR=ON GTEST_COLOR=yes ./build.sh --headless --bullet --with-cuda --run-tests --cmake-args='-DCMAKE_CXX_FLAGS="--coverage"'

              while [ ! -f ~/miniconda/pytorch_installed ]; do sleep 2; done # wait for Pytorch
              pytest --cov-report=xml --cov=./

              #re-build without bullet and cuda and run physics tests again
              #TODO: instead of reinstall, do this with configuration
              ./build.sh --headless
              pytest --cov-report=xml --cov=./ --cov-append tests/test_physics.py tests/test_sensors.py

              . ~/.bashrc
              export EMSCRIPTEN=$HOME/emsdk/fastcomp/emscripten
              nvm use v11.9.0
              # Generate JS CodeConv
              npm run test_with_coverage
      - run:
          name: Upload test coverage
          background: true
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim
              #Uploading test coverage for Python code
              bash <(curl -s https://codecov.io/bash) -f coverage.xml -cF Python

              # Uploading test coverage for JS code
              bash <(curl -s https://codecov.io/bash) -f coverage_js/coverage-final.json -cF JavaScript

              #Uploading test coverage for C++ code
              lcov --directory . --capture --output-file coverage.info
              lcov --remove coverage.info "*/deps/*" --output-file coverage.info > /dev/null
              bash <(curl -s https://codecov.io/bash) -f coverage.info -cF CPP
      - run:
          name: Build documentation
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              # Rebuild with all options enabled
              ./build.sh --with-cuda --with-bullet
              cd docs
              conda install -y -c conda-forge doxygen
              conda install -y  jinja2 pygments docutils
              conda install -y -c conda-forge pelican
              mkdir -p ../build/docs
              git submodule update --init
              ./build-public.sh
      - save_cache:
          key: docs-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          background: true
          paths:
            - ./habitat-sim/build/docs-public
      - run:
          name: Install api
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              if [ ! -d ./habitat-api ]
              then
                git clone -q https://github.com/facebookresearch/habitat-api.git
              fi
              cd habitat-api
              pip install -r requirements.txt --progress-bar off
              ln -s ../habitat-sim/data data
              touch ~/miniconda/pip_deps_installed
      - save_cache:
          key: conda-{{ checksum "habitat-sim/.circleci/config.yml" }}
          background: true
          paths:
            - ~/miniconda
      - run:
          name: Run api tests
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat; cd habitat-api
              python setup.py develop --all
              python setup.py test
      - save_cache:
          key: habitat-api-{{ checksum "./hapi_sha" }}
          background: true
          paths:
            - ./habitat-api

  update_docs:
    docker:
      - image: circleci/buildpack-deps:disco
    steps:
      - checkout
      - restore_cache:
          key: docs-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys:
          fingerprints:
            - "18:88:e0:37:b1:b3:7a:23:aa:1e:f7:43:a8:5b:8e:05"
      - run:
          name: Update public documentation
          no_output_timeout: 30m
          command: |
              # Update website
              git clone git@github.com:facebookmicrosites/habitat-website.git
              cd habitat-website
              git submodule update --init

              for dir in habitat-sim habitat-cpp
              do
                  rm -rf published/docs/${dir}
                  cp -r ../habitat-sim/build/docs-public/${dir} published/docs/.
              done

              git config --global user.name "Habitat"
              git config --global user.email habitat@fb.com
              NOW=$(date +"%m-%d-%Y")
              git add .
              git diff-index --quiet HEAD || git commit -m "Build habitat-sim ${NOW}"
              git push origin master

              # Deploy to public
              git checkout gh-pages
              git checkout master published
              sudo apt-get update || true
              sudo apt-get install -yq \
                    rsync
              rsync -a published/ ./.
              rm -rf published
              git add .
              git diff-index --quiet HEAD || git commit -m "Build habitat-sim ${NOW}"
              git push origin gh-pages

workflows:
  version: 2
  install_and_test:
    jobs:
      - python_lint
      - cpp_lint
      - js_lint
      - install_and_test_ubuntu
      - update_docs:
          requires:
            - install_and_test_ubuntu
          filters:
            branches:
              only: master
